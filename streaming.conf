filter {
  grok {
    match => { "message" => "^%{TIMESTAMP_ISO8601:datetime} IP %{IP:serverIp}.%{INT:serverPort} > %{IP:clientIP}.%{INT:clientPort}: .* length %{NUMBER:bytes}" }
  }
  if "_grokparsefailure"  in [tags] {
    drop { }
  }

  mutate {
    replace => { "contractKey" => "%{serverPort}" }
  }
  mutate {
    gsub => ["datetime", ":\d\d ", ":00 "]
  }
  date {
    match => [ "datetime" , "dd/MMM/yyyy:HH:mm:ss ZZ" ]
    target => "datetime"
    locale => "en"
  }
  aggregate {
   task_id => "%{contractCode}_%{streamId}_%{datetime}"
   code => "
         map['aggregatedRequests'] ||= {}

         requestId = event.get('requestId')
         requestAlreadyAggregated = map['aggregatedRequests'][requestId] != nil
         if requestAlreadyAggregated
            event.cancel()
            return nil
         end
         map['aggregatedRequests'][requestId] = true

         map['datetime'] ||= event.get('datetime')
         map['contractCode'] ||= event.get('contractCode')
         map['streamId'] ||= event.get('streamId')
         map['traffic'] ||= 0
         map['traffic'] += event.get('traffic')
         if ['ts', 'aac'].include?(event.get('mediaExtension'))
            chunkNumber = /media[-_].+_(\d+)/.match(event.get('mediaName'))[1]
            sourceAddr = event.get('sourceAddress')
            map['chunksCountByIp'] ||= {}
            map['chunksCountByIp'][sourceAddr] ||= {}
            map['chunksCountByIp'][sourceAddr][chunkNumber] ||= 0
            map['chunksCountByIp'][sourceAddr][chunkNumber] += 1
         end
         event.cancel()
       "
   push_map_as_event_on_timeout => true
   timeout_task_id_field => "map_id"
   timeout => 70
   timeout_code => "
        audience = 0
        chunks = event.get('chunksCountByIp')
        if (chunks.is_a?Hash)
            event.get('chunksCountByIp').each_value {|chunkCounts| audience += chunkCounts.values.max }
        end
        event.set('audience', audience)
        event.remove('map_id')
        event.remove('@version')
        event.remove('aggregatedRequests')
   "
   aggregate_maps_path => "/usr/share/logstash/data/aggregate_maps"
  }
}

output {
  mongodb {
    id => "streaming_to_mongo"
    collection => "cdn_streaming"
    database => "${MONGODB_DATABASE}"
    uri => "mongodb://${MONGODB_USER}:${MONGODB_PASSWORD}@${MONGODB_HOST}:${MONGODB_PORT}/${MONGODB_DATABASE}"
    codec => "json"
    isodate => true
  }
}